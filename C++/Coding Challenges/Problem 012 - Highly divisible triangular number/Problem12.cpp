/*

LINK: https://projecteuler.net/problem=12

PROBLEM: Highly divisible triangular number

Statement: 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

Author:
Mythreya Jayendra Lakshman

*/

#include <stdio.h>
#include <iostream>
#include <math.h>
#include <algorithm> 
#include <inttypes.h>
#include <iostream>
#include <fstream>

using namespace std;

int ND(int);
int num_divisors(int);
bool isFactor(int m, int n) { return m%n == 0; }

int main() {
	int current = 1;
	
	while (true) {
		if ( ND(current) > 500)
			break;
		current++;
	}
	cout << "The number to have over five hundred divisors is: " << current*(current + 1) / 2 << " with " << ND(current) << " divisors." << endl;
	system("pause");
	return 0;
}

int ND(int num) {
	if (num%2==0)
		return num_divisors(num / 2)*num_divisors(num+1);
	else
		return num_divisors((num+1) / 2)*num_divisors(num);
}

int num_divisors(int num) {
	int count = 0;
	for (int i = 1; i <= num / 2; i++) {
		if (isFactor(num, i)) 
			count++;
	}
	return ++count;
}